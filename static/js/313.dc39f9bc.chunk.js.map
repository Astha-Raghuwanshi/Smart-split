{"version":3,"file":"static/js/313.dc39f9bc.chunk.js","mappings":"4SAWA,MAiBA,EAjBoBA,KAChB,MAAOC,EAAOC,GAAYC,EAAAA,YACnBC,EAAcC,GAAmBF,EAAAA,YAElC,YAAEG,EAAaC,KAAMC,IAAaC,EAAAA,EAAAA,KAUxC,OARAN,EAAAA,WAAgB,KACZ,MAAMO,EAAcJ,IACdC,EAAOG,EAAYJ,cAEzBJ,EAASQ,EAAYC,YACrBN,EAAgBE,EAAK,GACtB,CAACD,IAEG,CAACL,EAAOG,EAAcI,EAAS,E,uBCpB1C,MAuCA,EAvCsBI,KAClB,MAAOC,EAAOC,GAAYX,EAAAA,YACnBY,EAAOC,GAAYb,EAAAA,WAkC1B,MAAO,CAACU,EAhCeV,EAAAA,aAAmBc,IACtCC,IAAYD,GACPE,MAAMC,IACH,MAAMC,EAAgBC,SAASC,cAAc,UACvCC,EAAuBH,EAAcI,WAAW,MAIhDC,EAAYN,EAAOO,MACnBC,EAAaR,EAAOS,OAE1BR,EAAcM,MAAQD,EACtBL,EAAcQ,OAASD,EAEvBJ,EAAqBM,UACjBV,EARqB,EADD,GAcxB,MAAMW,EAAcV,EAAcW,UAAU,YAAa,GAGzD,OADAlB,EAASiB,IACF,CAAI,IAEdE,OAAOC,IACJlB,EAASkB,EAAE,KAGZ,IACR,IAE4BnB,EAAM,E,aCvBzC,MAAMoB,GAAUC,EAAAA,EAAAA,GAAOC,EAAAA,EAAPD,EAAc,MAC1BE,aAAc,EACdC,QAAS,WACTZ,MAAO,QACPa,SAAU,WAGRC,GAAQL,EAAAA,EAAAA,GAAOM,EAAAA,EAAPN,EAAa,MACvB,SAAU,CACNO,YAAa,EACbC,aAAc,EACdC,SAAU,SAEdC,aAAc,eAkGlB,EA/FqC3C,EAAAA,MAAW4C,IAAsB,IAArB,YAAEC,GAAaD,EAC5D,MAAME,EAAgB9C,EAAAA,OAA6B,OAE5C+C,EAAgBC,GAAkBvC,KAClCX,EAAOG,EAAcI,GAAYR,KAClC,QAAEoD,IAAY3C,EAAAA,EAAAA,KAcpB,OAZAN,EAAAA,WAAgB,KACR8C,EAAcI,SAAuB,OAAZjD,QAAY,IAAZA,GAAAA,EAAckD,QACvCH,EAAeF,EAAcI,QACjC,GACD,CAACF,EAAgB/C,IAEpBD,EAAAA,WAAgB,KACR+C,GAAqC,KAAnBA,GAClBF,EAAYE,EAChB,GACD,CAACA,EAAgBF,KAGhBO,EAAAA,EAAAA,MAACpB,EAAO,CAACqB,IAAKP,EAAcQ,SAAA,EACxBC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPC,aAAc,EACdC,WAAW,OACXC,YAAY,gBAAeL,SAC9B,cAGDF,EAAAA,EAAAA,MAACd,EAAK,CAACsB,OAAK,EAAAN,SAAA,CACPjD,EAASwD,KAAKC,IACXV,EAAAA,EAAAA,MAAAW,EAAAA,SAAA,CAAAT,SAAA,EACIC,EAAAA,EAAAA,KAACS,EAAAA,GAAQ,CAAAV,UACLF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CACDC,WAAS,EACTC,eAAe,gBACfC,WAAW,SAAQd,SAAA,EAEnBF,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACIF,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CAAAF,SAAA,CAAEQ,EAAQO,OAAOC,KAAK,YAChCR,EAAQS,SACLhB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CAAAF,UACPF,EAAAA,EAAAA,MAAA,SAAAE,SAAA,CAAO,IAAEQ,EAAQS,OAAO,aAIpChB,EAAAA,EAAAA,KAAA,OAAAD,SAAML,EAAQa,EAAQU,cAdfV,EAAQW,KAiBvBlB,EAAAA,EAAAA,KAACmB,EAAAA,EAAO,UAGhBtB,EAAAA,EAAAA,MAACI,EAAAA,EAAU,CACPmB,UAAU,QACVnD,MAAM,OACNkB,SAAS,QACTkC,GAAG,WAAUtB,SAAA,CAChB,UACWL,EAAa,OAALnD,QAAK,IAALA,EAAAA,EAAS,UAGjCyD,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPC,aAAc,EACdC,WAAW,OACXC,YAAY,gBAAeL,SAC9B,gBAGDC,EAAAA,EAAAA,KAACjB,EAAK,CAACsB,OAAK,EAAAN,SACPrD,GACGA,EAAa4D,KAAKgB,IACdtB,EAAAA,EAAAA,KAACS,EAAAA,GAAQ,CAAAV,UACLF,EAAAA,EAAAA,MAACa,EAAAA,GAAI,CACDC,WAAS,EACTC,eAAe,gBAAeb,SAAA,EAE9BF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CACKuB,EAAIC,YAAYR,KAAK,QAAM,IAC3BO,EAAIE,UAAUT,KAAK,OAChB,IACPrB,EAAQ4B,EAAIL,YATNK,EAAIJ,SAc/BlB,EAAAA,EAAAA,KAACC,EAAAA,EAAU,CACPmB,UAAU,SACVK,UAAU,WACVtC,SAAS,QAAOY,UAEhBC,EAAAA,EAAAA,KAAA,cAEE,I,cCvGlB,MAAM0B,EAAuB,CACzB,yBAA0B,CACtBb,WAAY,eAqEpB,EAjEwCxB,IAA6B,IAA5B,OAAEsC,EAAM,WAAEC,GAAYvC,EAC3D,MAAOwC,EAAUvC,GAAe7C,EAAAA,YAEzBqF,EAAaC,GAAkBtF,EAAAA,UAAe,GA2BrD,OACIoD,EAAAA,EAAAA,MAACmC,EAAAA,EAAM,CACHC,KAAMN,EACNO,QAASN,EACTO,GAAIT,EACJU,OAAO,QAAOrC,SAAA,EAEdC,EAAAA,EAAAA,KAACqC,EAAAA,EAAW,CAAAtC,SACP8B,IACGhC,EAAAA,EAAAA,MAACyC,EAAAA,EAAG,CACAC,QAAQ,OACR1B,WAAW,SACXD,eAAe,gBAAeb,SAAA,EAE9BC,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACC,QAvCHjE,IACzBA,EAAEkE,iBAEEb,IAGJc,MAAMd,GACDpE,MAAKmF,UACF,IACI,MAAMC,QAAaC,EAASD,OACtBE,EAAQ,cAAAC,QAAiBC,EAAAA,EAAAA,MAAU,SACzCC,EAAAA,EAAAA,IAAiBL,EAAME,GACvBhB,GAAe,EACnB,CAAE,MAAMvD,GAIJ,OAHA2E,QAAQC,IAAI5E,GACZ6E,MAAM,6EACNtB,GAAe,IACR,CACX,KAIRA,GAAe,GAAK,EAiBsCuB,SAAUxB,EAAY/B,UAC5DC,EAAAA,EAAAA,KAACuD,EAAAA,EAAY,OAEjBvD,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACc,UAAU,EAAKvD,UACvBC,EAAAA,EAAAA,KAACwD,EAAAA,EAAY,OAEjBxD,EAAAA,EAAAA,KAACwC,EAAAA,EAAU,CAACc,UAAU,EAAKvD,UACvBC,EAAAA,EAAAA,KAACyD,EAAAA,EAAW,YAK5BzD,EAAAA,EAAAA,KAAC0D,EAAAA,EAAa,CAACC,UAAU,EAAK5D,UAC1BC,EAAAA,EAAAA,KAACsC,EAAAA,EAAG,CAAClD,aAAa,OAAMW,UACpBC,EAAAA,EAAAA,KAAC4D,EAAU,CAACtE,YAAaA,UAG5B,C","sources":["components/Trips/Trip-context/usePayments.tsx","hooks/useScreenshot.tsx","components/Payments/Payment-screenshot.tsx","components/Payments/Payments-share.tsx"],"sourcesContent":["import React from 'react';\nimport { useTripContext } from './Trip-context';\nimport { ComputedTxns } from '../../../services/SplitPaymentCalculator';\nimport { TxnType } from './Trip-types';\n\ntype ReturnType = [\n    number | undefined,\n    ComputedTxns | undefined,\n    TxnType[]\n];\n\nconst usePayments = (): ReturnType => {\n    const [total, setTotal] = React.useState<number>();\n    const [transactions, setTransactions] = React.useState<ComputedTxns>();\n\n    const { getPayments, txns: expenses } = useTripContext();\n\n    React.useEffect(() => {\n        const payInstance = getPayments();\n        const txns = payInstance.getPayments();\n        \n        setTotal(payInstance.getTotal());\n        setTransactions(txns);\n    }, [getPayments]);\n\n    return [total, transactions, expenses];\n};\n\nexport default usePayments;","import React from \"react\";\nimport html2canvas from \"html2canvas\";\n\ntype ReturnType = [string | undefined, (node: HTMLElement) => void, any];\n\nconst useScreenshot = (): ReturnType => {\n    const [image, setImage] = React.useState<string>();\n    const [error, setError] = React.useState<any>();\n\n    const takeScreenShot = React.useCallback((node: HTMLElement) => {\n        html2canvas(node)\n            .then((canvas) => {\n                const croppedCanvas = document.createElement(\"canvas\");\n                const croppedCanvasContext = croppedCanvas.getContext(\"2d\")!;\n                // init data\n                const cropPositionTop = 0;\n                const cropPositionLeft = 0;\n                const cropWidth = canvas.width;\n                const cropHeight = canvas.height;\n\n                croppedCanvas.width = cropWidth;\n                croppedCanvas.height = cropHeight;\n\n                croppedCanvasContext.drawImage(\n                    canvas,\n                    cropPositionLeft,\n                    cropPositionTop\n                );\n\n                const base64Image = croppedCanvas.toDataURL(\"image/png\", 1);\n\n                setImage(base64Image);\n                return true;\n            })\n            .catch((e) => {\n                setError(e);\n            });\n\n        return true;\n    }, []);\n\n    return [image, takeScreenShot, error];\n};\n\nexport default useScreenshot;\n","import React from \"react\";\n\nimport Typography from \"@mui/material/Typography\";\nimport List from \"@mui/material/List\";\nimport Divider from \"@mui/material/Divider\";\nimport ListItem from \"@mui/material/ListItem\";\nimport Grid from \"@mui/material/Grid\";\nimport Paper from \"@mui/material/Paper\";\nimport styled from \"@mui/system/styled\";\n\nimport usePayments from \"../Trips/Trip-context/usePayments\";\nimport useScreenshot from \"../../hooks/useScreenshot\";\nimport { useTripContext } from \"../Trips/Trip-context/Trip-context\";\n\ntype IProps = {\n    setImageUrl: (url: string) => void;\n};\n\nconst Wrapper = styled(Paper)(() => ({\n    borderRadius: 0,\n    padding: \"0.475rem\",\n    width: \"24rem\",\n    maxWidth: \"100%\",\n}));\n\nconst CList = styled(List)(() => ({\n    \"& > li\": {\n        paddingLeft: 0,\n        paddingRight: 0,\n        fontSize: \"small\",\n    },\n    marginBottom: \"0.875rem\",\n}));\n\nconst ScreenShot: React.FC<IProps> = React.memo(({ setImageUrl }) => {\n    const screenShotRef = React.useRef<HTMLDivElement>(null);\n\n    const [imageBase64Str, takeScreenShot] = useScreenshot();\n    const [total, transactions, expenses] = usePayments();\n    const { toPrice } = useTripContext();\n\n    React.useEffect(() => {\n        if (screenShotRef.current && transactions?.length) {\n            takeScreenShot(screenShotRef.current);\n        }\n    }, [takeScreenShot, transactions]);\n\n    React.useEffect(() => {\n        if (imageBase64Str && imageBase64Str !== \"\") {\n            setImageUrl(imageBase64Str);\n        }\n    }, [imageBase64Str, setImageUrl]);\n\n    return (\n        <Wrapper ref={screenShotRef}>\n            <Typography\n                borderBottom={1}\n                fontWeight=\"bold\"\n                borderColor=\"text.disabled\"\n            >\n                Expenses\n            </Typography>\n            <CList dense>\n                {expenses.map((expense) => (\n                    <>\n                        <ListItem key={expense.id}>\n                            <Grid\n                                container\n                                justifyContent=\"space-between\"\n                                alignItems=\"center\"\n                            >\n                                <div>\n                                    <Typography>{expense.friend.name} paid:</Typography>\n                                    {expense.reason && (\n                                        <Typography>\n                                            <small>({expense.reason})</small>\n                                        </Typography>\n                                    )}\n                                </div>\n                                <div>{toPrice(expense.amount)}</div>\n                            </Grid>\n                        </ListItem>\n                        <Divider />\n                    </>\n                ))}\n                <Typography\n                    textAlign=\"right\"\n                    width=\"100%\"\n                    fontSize=\"small\"\n                    mt=\"0.875rem\"\n                >\n                    Total: {toPrice(total ?? 0)}\n                </Typography>\n            </CList>\n            <Typography\n                borderBottom={1}\n                fontWeight=\"bold\"\n                borderColor=\"text.disabled\"\n            >\n                Final Txns\n            </Typography>\n            <CList dense>\n                {transactions &&\n                    transactions.map((txn) => (\n                        <ListItem key={txn.id}>\n                            <Grid\n                                container\n                                justifyContent=\"space-between\"\n                            >\n                                <span>\n                                    {txn.from_friend.name} owes{\" \"}\n                                    {txn.to_friend.name}:\n                                </span>{\" \"}\n                                {toPrice(txn.amount)}\n                            </Grid>\n                        </ListItem>\n                    ))}\n            </CList>\n            <Typography\n                textAlign=\"center\"\n                marginTop=\"0.875rem\"\n                fontSize=\"small\"\n            >\n                <sub></sub>\n            </Typography>\n        </Wrapper>\n    );\n});\n\nexport default ScreenShot;\n","import React from \"react\";\n\nimport Box from \"@mui/material/Box\";\nimport Dialog from \"@mui/material/Dialog\";\nimport DialogContent from \"@mui/material/DialogContent\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport IconButton from \"@mui/material/IconButton\";\nimport DownloadIcon from '@mui/icons-material/Download';\nimport WhatsAppIcon from '@mui/icons-material/WhatsApp';\nimport FacebookIcon from '@mui/icons-material/Facebook';\nimport { SxProps } from \"@mui/material\";\nimport TwitterIcon from '@mui/icons-material/Twitter';\n\n\nimport ScreenShot from \"./Payment-screenshot\";\nimport { downloadBlobFile, randomId } from \"../../utils/helpers\";\n\ntype IProps = {\n    isOpen: boolean;\n    closeModal: () => void;\n};\n\nconst sxDialogBox: SxProps = {\n    \"& .MuiDialog-container\": {\n        alignItems: \"flex-start\",\n    },\n};\n\nconst PaymentsShare: React.FC<IProps> = ({ isOpen, closeModal }) => {\n    const [imageUrl, setImageUrl] = React.useState<string>();\n    \n    const [downloading, setDownloading] = React.useState(false);\n\n    const handleDownloadImage = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        if(!imageUrl) return;\n\n        // convert base64 to blob\n        fetch(imageUrl)\n            .then(async (response) => {\n                try {\n                    const blob = await response.blob();\n                    const filename = `final-txns-${randomId()}.png`;\n                    downloadBlobFile(blob, filename);\n                    setDownloading(false);\n                } catch(e) {\n                    console.log(e);\n                    alert(\"Error occured while downloading image. Please refresh page and try again.\");\n                    setDownloading(false);\n                    return false;\n                }\n                \n            });\n\n        setDownloading(true);\n    };\n\n    return (\n        <Dialog\n            open={isOpen}\n            onClose={closeModal}\n            sx={sxDialogBox}\n            scroll=\"paper\"\n        >\n            <DialogTitle>\n                {imageUrl && (\n                    <Box\n                        display=\"flex\"\n                        alignItems=\"center\"\n                        justifyContent=\"space-between\"\n                    >\n                        <IconButton onClick={handleDownloadImage} disabled={downloading}>\n                            <DownloadIcon />\n                        </IconButton>\n                        <IconButton disabled={true}>\n                            <WhatsAppIcon />\n                        </IconButton>\n                        <IconButton disabled={true}>\n                            <TwitterIcon />\n                        </IconButton>\n                    </Box>\n                )}\n            </DialogTitle>\n            <DialogContent dividers={true}>\n                <Box marginBottom=\"12px\">\n                    <ScreenShot setImageUrl={setImageUrl} />\n                </Box>\n            </DialogContent>\n        </Dialog>\n    );\n};\n\nexport default PaymentsShare;\n"],"names":["usePayments","total","setTotal","React","transactions","setTransactions","getPayments","txns","expenses","useTripContext","payInstance","getTotal","useScreenshot","image","setImage","error","setError","node","html2canvas","then","canvas","croppedCanvas","document","createElement","croppedCanvasContext","getContext","cropWidth","width","cropHeight","height","drawImage","base64Image","toDataURL","catch","e","Wrapper","styled","Paper","borderRadius","padding","maxWidth","CList","List","paddingLeft","paddingRight","fontSize","marginBottom","_ref","setImageUrl","screenShotRef","imageBase64Str","takeScreenShot","toPrice","current","length","_jsxs","ref","children","_jsx","Typography","borderBottom","fontWeight","borderColor","dense","map","expense","_Fragment","ListItem","Grid","container","justifyContent","alignItems","friend","name","reason","amount","id","Divider","textAlign","mt","txn","from_friend","to_friend","marginTop","sxDialogBox","isOpen","closeModal","imageUrl","downloading","setDownloading","Dialog","open","onClose","sx","scroll","DialogTitle","Box","display","IconButton","onClick","preventDefault","fetch","async","blob","response","filename","concat","randomId","downloadBlobFile","console","log","alert","disabled","DownloadIcon","WhatsAppIcon","TwitterIcon","DialogContent","dividers","ScreenShot"],"sourceRoot":""}